/**
 * The MIT License
 *
 * Copyright (c) 2010-2012 www.myjeeva.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
package com.dhl.serv.service.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.SystemUtils;

/**
 * @desc Image manipulation - Conversion
 *
 * @filename ImageUtil.java
 * @author <a href="mailto:jeeva@myjeeva.com">Jeevanandam Madanagopal</a>
 * @copyright &copy; 2010-2012 www.myjeeva.com
 */
public class ImageUtil {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		File file = new File("/Users/Gustavo/Gustavo/temp/dhl3novo120.png");

		try {
			/*
			 * Reading a Image file from file system
			 */
			FileInputStream imageInFile = new FileInputStream(file);
			byte imageData[] = new byte[(int)file.length()];
			imageInFile.read(imageData);

			/*
			 * Converting Image byte array into Base64 String
			 */
			String imageDataString = encodeImage(imageData);
            System.out.print("imageDataString:"+imageDataString);
            String jjjjj= "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";
			/*
			 * Converting a Base64 String into Image byte array
			 */
			byte[] imageByteArray = decodeImage(jjjjj);

			/*
			 * Write a image byte array into file system
			 */
			FileOutputStream imageOutFile = new FileOutputStream("/Users/Gustavo/Gustavo/temp/dhl3novo120NOVO2.png");
			imageOutFile.write(imageByteArray);

			imageInFile.close();
			imageOutFile.close();

			System.out.println("Image Successfully Manipulated!");
		} catch (FileNotFoundException e) {
			System.out.println("Image not found" + e);
		} catch (IOException ioe) {
			System.out.println("Exception while reading the Image " + ioe);
		}

	}

	/**
	 * Encodes the byte array into base64 string
	 * @param imageByteArray - byte array
	 * @return String a {@link String}
	 */
	public static String encodeImage(byte[] imageByteArray){
		return Base64.encodeBase64URLSafeString(imageByteArray);
	}

	/**
	 * Decodes the base64 string into byte array
	 * @param imageDataString - a {@link String}
	 * @return byte array
	 */
	public static byte[] decodeImage(String imageDataString) {
		return Base64.decodeBase64(imageDataString);
	}

}
